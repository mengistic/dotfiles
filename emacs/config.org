
* Local config
** Start Up
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (setq backup-directory-alist '(("." . "~/.emacs.d/saves/")))
  (setq inhibit-startup-screen t)
  (setq backup-inhibited t)
  (setq scroll-margin 7)
  (setq compilation-read-command t)
  (setq display-line-numbers-type 'relative)
  (setq display-line-numbers-current-absolute nil)
  (setq display-line-number-width nil)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)
#+end_src

** Themes and faces
#+begin_src emacs-lisp
  (load-theme 'gruvbox-dark-hard t)

  (set-frame-parameter nil 'alpha-background 90)
  (set-background-color "#000000")
  (set-face-attribute 'default (selected-frame) :height 140 :font "Iosevka Nerd Font-14")
  (set-fontset-font t 'khmer "Khmer OS Siemreap-14")
#+end_src

** Line numbers
#+begin_src emacs-lisp

  (set-face-attribute 'line-number nil :background 'unspecified)
  (set-face-attribute 'line-number-current-line nil :background 'unspecified)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'latex-mode-hook 'display-line-numbers-mode)
  (add-hook 'LaTeX-mode-hook 'display-line-numbers-mode)
#+end_src

* Packages
** Evil mode
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
  (rc/require 'evil)
  (rc/require 'evil-collection)
  (evil-mode 1)
  (when (require 'evil-collection nil t)
    (evil-collection-init))
  (define-key evil-insert-state-map (kbd "C-n")   'next-line)
  (define-key evil-insert-state-map (kbd "C-p")   'previous-line)
  (define-key evil-insert-state-map (kbd "C-a")   'evil-beginning-of-line)
  (define-key evil-insert-state-map (kbd "C-e")   'evil-end-of-line)
  (define-key evil-insert-state-map (kbd "C-b")   'evil-backward-char)
  (define-key evil-insert-state-map (kbd "C-f")   'evil-forward-char)
  (define-key evil-normal-state-map (kbd "S")     'shell-command)
  (define-key evil-normal-state-map (kbd "SPC c") 'compile)
  (define-key evil-insert-state-map (kbd "C-g")   'evil-force-normal-state)
#+end_src
** Magit
#+begin_src emacs-lisp
  (rc/require 'magit)
#+end_src

** Projectile
#+begin_src emacs-lisp
  (rc/require 'projectile)
  (projectile-mode t)
  (define-key evil-normal-state-map (kbd "SPC p") 'projectile-switch-project)
  (define-key evil-normal-state-map (kbd "SPC f") 'projectile-find-file)
  (recentf-mode -1)
#+end_src
** Company
#+begin_src emacs-lisp
  (rc/require 'company)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 2)
  (setq company-selection-wrap-around t)
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-format-margin-function nil)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (rc/require 'yasnippet)
  (yas-global-mode 1)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<backtab>") yas-maybe-expand)
  (define-key yas-minor-mode-map (kbd "C-SPC") yas-maybe-expand)
#+end_src
** Lsp
#+begin_src emacs-lisp
  (rc/require 'lsp-mode)
  (setq lsp-diagnostic-package :none)
  (setq lsp-headerline-breadcrumb-enable nil)
  (add-hook 'LaTeX-mode-hook #'lsp)
  (add-hook 'latex-mode-hook #'lsp)
  (add-hook 'python-mode-hook #'lsp)
  (add-hook 'c-mode-hook #'lsp)
  (add-hook 'lsp-mode-hook
            (lambda ()
              (define-key lsp-mode-map (kbd "C-c r") 'lsp-rename)))
#+end_src

** LaTeX
#+begin_src emacs-lisp
  (rc/require 'auctex)
  (require 'tex)
  (rc/require 'lsp-latex)
  (setq-default TeX-engine 'xetex)
  (setq lsp-latex-server 'texlab
        TeX-auto-save t
        TeX-parse-self t
        electric-indent-mode t
        font-latex-fontify-sectioning 1
        font-latex-fontify-script nil
        font-latex-fontify-sectioning 'color
        TeX-auto-local nil
        tex-fontify-script nil
        font-latex-slide-title-face nil
        TeX-PDF-mode t
        TeX-source-correlate-mode t
        TeX-source-correlate-start-server t)

  (add-to-list 'TeX-expand-list
               '("%sn" (lambda () server-name)))
  (add-to-list 'TeX-expand-list
               '("%sn" (lambda () server-name)))
  (add-to-list 'TeX-view-program-list
               '("Zathura"
                 ("zathura %o"
                  (mode-io-correlate " --synctex-forward %n:0:\"%b\" -x \"emacsclient --socket-name=%sn +%{line} %{input}\""))
                 "zathura"))
  (setcar (cdr (assoc 'output-pdf TeX-view-program-selection)) "Zathura")


  (defun my-latex-smart-dollar ()
    (interactive)
    (if (eq (char-before) ?$)
        (progn
          (backward-delete-char-untabify 1)
          (insert "\\\(\\\)")
          (backward-char 2))
      (insert "$")))

  (defun my-latex-smart-displaymath ()
    (interactive)
    (if (eq (char-before) ?\\)
        (progn
          ;; (backward-delete-char-untabify 1)
          (insert "\[\\\]")
          (backward-char 2))
      (insert "\[")))


  (defun my-latex-smart-displayset ()
    (interactive)
    (if (eq (char-before) ?\\)
        (progn
          ;; (backward-delete-char-untabify 1)
          (insert "\\\}")
          (backward-char 2))
      (insert "{")))


  (defun my-latex-save-run ()
    (interactive)
    (save-buffer)
    (TeX-command-master))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key evil-normal-state-local-map
                          (kbd "SPC SPC") 'my-latex-save-run)))
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key evil-insert-state-local-map
                          (kbd "$") 'my-latex-smart-dollar)))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key evil-insert-state-local-map
                          (kbd "[") 'my-latex-smart-displaymath)))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key evil-insert-state-local-map
                          (kbd "{") 'my-latex-smart-displayset)))
#+end_src

** Orgmode
#+begin_src emacs-lisp
  (set-face-attribute 'org-block nil             :font "JetBrains Mono" :height 0.9 :background 'unspecified)
  (set-face-attribute 'org-block-begin-line nil  :font "JetBrains Mono" :height 0.8 :background 'unspecified)
  (set-face-attribute 'org-block-end-line nil    :font "JetBrains Mono" :height 0.8 :background 'unspecified)

  (rc/require 'org-bullets)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (define-key evil-normal-state-map (kbd "SPC x p") 'org-latex-export-to-pdf)
  (define-key evil-normal-state-map (kbd "SPC x h") 'org-html-export-to-html)
  (setq org-highlight-latex-and-related '(latex script entities))
  (setq org-cycle-emulate-tab 'white)

#+end_src

** Personal preference
#+begin_src emacs-lisp
  (rc/require 'ranger)
  (ranger-override-dired-mode t)
  (define-key evil-normal-state-map (kbd "SPC d") 'deer)

  (rc/require 'marginalia)
  (rc/require 'ivy)
  (rc/require 'swiper)
  (rc/require 'which-key)
  (rc/require 'feebleline)
  (which-key-mode 1)
  (feebleline-mode 1)
  (ivy-mode 1)
  (marginalia-mode 1)
  (global-set-key "\C-s" 'swiper)
#+end_src
#+begin_src emacs-lisp
  (defun nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))

  (defun my-smart-paren ()
    (interactive)
    (if (eq  (char-before) ?\()
        (progn
          (insert ")")
          (backward-char))
      (insert ")")))

  (defun my-smart-brace ()
    (interactive)
    (if (eq  (char-before) ?\{)
        (progn (insert "}") (backward-char))
      (insert "}")))

  (defun my-smart-square-brace ()
    (interactive)
    (if (eq  (char-before) ?\[)
        (progn
          (insert "]")
          (backward-char))
      (insert "]")))


  (defun my-smart-quote-double ()
    (interactive)
    (if (eq  (char-before) ?\")
        (progn
          (insert "\"")
          (backward-char))
      (insert "\"")))

  (global-set-key (kbd "C-x K") 'nuke-all-buffers)
  (define-key evil-insert-state-map (kbd "\"") 'my-smart-quote-double)
  (define-key evil-insert-state-map (kbd ")") 'my-smart-paren)
  (define-key evil-insert-state-map (kbd "}") 'my-smart-brace)
  (define-key evil-insert-state-map (kbd "]") 'my-smart-square-brace)
  (define-key evil-insert-state-map (kbd "C-k") 'evil-open-above)
  (define-key evil-normal-state-map (kbd "SPC w") 'save-buffer)
#+end_src
